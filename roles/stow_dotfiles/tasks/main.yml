- name: Ensure .dotfiles directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.dotfiles"
    state: directory
    mode: "0755"

- name: Check for local changes in .dotfiles repository
  ansible.builtin.command: git status --porcelain
  args:
    chdir: "{{ ansible_env.HOME }}/.dotfiles"
  register: stow_dotfiles_git_status
  changed_when: false
  failed_when: false

- name: Stash local changes if any
  ansible.builtin.command: git stash
  args:
    chdir: "{{ ansible_env.HOME }}/.dotfiles"
  when: stow_dotfiles_git_status.stdout != ""
  register: stow_dotfiles_git_stash
  changed_when: false

- name: Clone or update .dotfiles repository
  ansible.builtin.git:
    repo: "https://github.com/justJackjon/.dotfiles.git"
    dest: "{{ ansible_env.HOME }}/.dotfiles"
    version: main
    update: true
    accept_hostkey: true

- name: Stow dotfiles with --adopt and restore git changes
  ansible.builtin.shell:
    cmd: |
      cd "{{ ansible_env.HOME }}/.dotfiles"
      # NOTE: The --adopt flag is used to take ownership of existing files in the home directory
      #       that would otherwise conflict with stow's symlinking process. This allows stow
      #       to create symlinks for these files and move the original files into the .dotfiles
      #       repository. Immediately after, 'git restore .' is used to revert these changes
      #       in the .dotfiles repository, ensuring that the repository remains clean and
      #       reflects only the intended dotfiles from the origin.
      stow */ --adopt
      git restore .
  args:
    chdir: "{{ ansible_env.HOME }}/.dotfiles"
  changed_when: true

- name: Unstash local changes
  ansible.builtin.command: git stash pop
  args:
    chdir: "{{ ansible_env.HOME }}/.dotfiles"
  when: stow_dotfiles_git_stash.stdout is defined and "Saved working directory and index state" in stow_dotfiles_git_stash.stdout
  changed_when: false
