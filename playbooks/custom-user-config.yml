- name: Gather Facts
  hosts: localhost
  connection: local
  gather_facts: true
  tasks:
    - name: Set kinto_config_path
      set_fact:
        kinto_config_path: "/home/{{ ansible_user_id }}/.config/kinto/kinto.py"
 
- name: Apply Custom Keyboard Mappings
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
  - name: "Create ~/.Xmodmap with custom key mappings"
    copy:
      content: |
        keycode 11 = 2 at
        keycode 12 = 3 sterling numbersign
        keycode 48 = apostrophe quotedbl
        keycode 49 = section plusminus
        keycode 51 = backslash bar
        keycode 94 = grave asciitilde
        keycode 108 = Mode_switch Mode_switch Mode_switch Mode_switch
      dest: "/home/{{ ansible_user_id }}/.Xmodmap"
      mode: 0644
    when: 
      - ansible_facts.env.LANGUAGE == 'en_GB:en'
      - ansible_facts.system_vendor == 'GOOGLE'
      - ansible_facts.os_family == 'Debian'
    register: xmodmap_copy_result

  - name: "Apply custom key mappings with xmodmap"
    shell:
      cmd: xmodmap /home/{{ ansible_user_id }}/.Xmodmap
    when: xmodmap_copy_result.changed

- name: Configure XFCE4 General Keyboard Shortcuts 
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: "Set custom Kinto compatible keyboard shortcuts in XFCE"
      command:
        cmd: "{{ item }}"
      with_items:
        - xfconf-query --channel=xfce4-keyboard-shortcuts --property "/xfwm4/custom/<Primary>Tab" --create --type string --set "cycle_windows_key"
        - xfconf-query --channel=xfce4-keyboard-shortcuts --property "/xfwm4/custom/<Primary><Shift>Tab" --create --type string --set "cycle_reverse_windows_key"
        - xfconf-query --channel=xfce4-keyboard-shortcuts --property "/commands/custom/<Super>l" --reset
        - xfconf-query --channel=xfce4-keyboard-shortcuts --property "/commands/custom/<Primary><Alt>q" --create --type string --set "xflock4"
      when: ansible_facts.env.XDG_CURRENT_DESKTOP == 'XFCE'

- name: Configure XFCE4 Workspace Switching Shortcuts 
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: "Create a temporary directory for the scripts"
      tempfile:
        state: directory
        suffix: _xfce4_shortcuts
      register: tempdir

    - name: "Ensure there are 10 workspaces"
      command:
        cmd: xfconf-query -c xfwm4 -p /general/workspace_count -s 10
      when: ansible_facts.env.XDG_CURRENT_DESKTOP == 'XFCE'

    - name: "Copy XFCE4 workspace switching shortcut deletion script"
      copy:
        src: "../scripts/remove_xfce4_workspace_switch_shortcuts.sh"
        dest: "{{ tempdir.path }}/remove_xfce4_workspace_switch_shortcuts.sh"
        mode: 0744

    - name: "Execute XFCE4 workspace switching shortcut deletion script"
      command:
        cmd: "{{ tempdir.path }}/remove_xfce4_workspace_switch_shortcuts.sh"
      when: ansible_facts.env.XDG_CURRENT_DESKTOP == 'XFCE'

    - name: "Copy XFCE4 workspace switching shortcut creation script"
      copy:
        src: "../scripts/create_xfce4_workspace_switch_shortcuts.sh"
        dest: "{{ tempdir.path }}/create_xfce4_workspace_switch_shortcuts.sh"
        mode: 0744

    - name: "Execute XFCE4 workspace switching shortcut creation script"
      command:
        cmd: "{{ tempdir.path }}/create_xfce4_workspace_switch_shortcuts.sh"
      when: ansible_facts.env.XDG_CURRENT_DESKTOP == 'XFCE'

    - name: Cleanup temporary scripts
      file:
        path: "{{ tempdir.path }}"
        state: absent

- name: Install and Configure Kinto.sh 
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: "Install Kinto dependencies"
      apt:
        name: gir1.2-vte-2.91
        state: present
      become: true
      when: ansible_facts.pkg_mgr == 'apt'

    - name: "Create a temporary directory for the Kinto install script"
      tempfile:
        state: directory
        suffix: _install_kinto
      register: tempdir

    - name: "Download Kinto install script"
      get_url:
        url: https://raw.githubusercontent.com/rbreaves/kinto/HEAD/install/linux.sh
        dest: "{{ tempdir.path }}/install_kinto.sh"
        mode: 0755
      register: kinto_download_result
      when: ansible_facts.system == 'Linux'

    - name: "Run Kinto install script"
      shell: "{{ tempdir.path }}/install_kinto.sh"
      args:
        executable: /bin/bash
      register: kinto_install_result
      when: kinto_download_result is success

    - name: "Uncomment XFCE4 specific lines in Kinto.py when current desktop is XFCE4"
      replace:
        path: "{{ kinto_config_path }}"
        regexp: '^(\s*)([#\s]+)(.*\s(?!not-)xfce4[\s\w]*)$'
        replace: '\1\3'
        backup: true
      when: kinto_install_result is success and ansible_facts.env.XDG_CURRENT_DESKTOP == 'XFCE'

    - name: "Modify general GUI related shortcuts for en_GB Chromebook keyboard layouts in kinto.py"
      blockinfile:
        path: "{{ kinto_config_path }}"
        block: "{{ lookup('file', '../snippets/kinto_gui_shortcuts') }}"
        marker: "# {mark}: ANSIBLE MANAGED GENERAL GUI SHORTCUTS"
        insertbefore: '\s*\},\s*\"General GUI\"\s*'
      when: 
        - ansible_facts.env.LANGUAGE == 'en_GB:en'
        - ansible_facts.system_vendor == 'GOOGLE'
        - ansible_facts.os_family == 'Debian'

    - name: "Modify terminal related shortcuts for en_GB Chromebook keyboard layouts in kinto.py"
      blockinfile:
        path: "{{ kinto_config_path }}"
        block: "{{ lookup('file', '../snippets/kinto_terminal_shortcuts') }}"
        marker: "# {mark}: ANSIBLE MANAGED TERMINAL SHORTCUTS"
        insertbefore: '\s*\},\s*\"terminals\"\s*'
      when: 
        - ansible_facts.env.LANGUAGE == 'en_GB:en'
        - ansible_facts.system_vendor == 'GOOGLE'
        - ansible_facts.os_family == 'Debian'

    - name: "Restart xkeysnail service after making changes to kinto.py"
      systemd:
        name: xkeysnail
        state: restarted
      become: true

    - name: "Remove files downloaded by Kinto install script"
      file:
        path: "/home/{{ ansible_user_id }}/Downloads/{{ item }}"
        state: absent
      loop:
        - kinto-master
        - kinto.zip
      become: true

- name: Manage Kinto Backup Files
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Get list of backup files
      set_fact:
        backup_files: "{{ lookup('fileglob', kinto_config_path ~ '.*', wantlist=true) }}"
      when: ansible_facts.system == "Linux"

    - name: Extract timestamps from backup filenames
      set_fact:
        backup_files_with_ts: "{{ backup_files | map('regex_replace', '.*\\.(.*)~', '\\1') | list }}"

    - name: Sort backup files by extracted timestamps
      set_fact:
        backup_files_sorted: "{{ backup_files | zip(backup_files_with_ts) | sort(attribute='1') | map(attribute='0') | list }}"

    - name: Remove older backup files whilst retaining the latest backup
      file:
        path: "{{ item }}"
        state: absent
      loop: "{{ backup_files_sorted[:-1] }}"
      when: backup_files_sorted is defined and backup_files_sorted|length > 1

